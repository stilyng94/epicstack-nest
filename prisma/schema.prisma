// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "nestjs-zod-prisma"
  output   = "./generated/zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  generateDto = true // (default) Generate DTOs for NestJS

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Schema" // (default) Suffix to apply to your prisma models when naming Zod schemas

  dtoCase = "PascalCase" // (default) Output DTOs using pascal case (ex. UserDto, PostDto)
  // dtoCase             = "camelCase" // Output DTOs using camel case (ex. userDto, postDto)

  dtoSuffix = "Dto" // (default) Suffix to apply to your prisma models when naming DTOs

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

model Role {
  id        String   @id @unique @default(cuid()) ///@z.string().cuid2()
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model User {
  id                     String         @id @default(cuid()) ///@z.string().cuid2()
  email                  String         @unique ///@z.string().toLowerCase().email()
  username               String?
  roles                  Role[]
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  RefreshToken           RefreshToken[]
  isTwoFactorAuthEnabled Boolean        @default(false)
  Account                Account[]
  isVerified             Boolean        @default(false)
}

model VerificationToken {
  id String @id @default(cuid()) ///@z.string().cuid2()

  /// The type of verification, e.g. "email" or "phone number"
  target String

  type      String ///@z.union([z.literal('2fa'), z.literal('2fa-verify'),z.literal('forgot-password'),z.literal('onboarding'),z.literal('login'),z.literal('change-email')])
  expiresAt DateTime? /// When it's safe to delete this verification

  createdAt DateTime @default(now())
  /// The secret key used to generate the otp
  secret    String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  @@unique([target, type])
}

model RefreshToken {
  id     String @id @default(cuid()) ///@z.string().cuid2()
  token  String
  user   User   @relation(fields: [userId], references: [id])
  userId String ///@z.string().cuid2()
}

model Account {
  id        String   @id @default(cuid()) ///@z.string().cuid2()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  provider  String ///@z.union([z.literal('google'), z.literal('twitter')])
  subject   String
  userId    String ///@z.string().cuid2()
  user      User     @relation(fields: [userId], references: [id])

  @@unique([provider, subject])
  @@index([userId])
}
