// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "nestjs-zod-prisma"
  output   = "./generated/zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  generateDto = true // (default) Generate DTOs for NestJS

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Schema" // (default) Suffix to apply to your prisma models when naming Zod schemas

  dtoCase = "PascalCase" // (default) Output DTOs using pascal case (ex. UserDto, PostDto)
  // dtoCase             = "camelCase" // Output DTOs using camel case (ex. userDto, postDto)

  dtoSuffix = "Dto" // (default) Suffix to apply to your prisma models when naming DTOs

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

model Role {
  id          String       @id @unique @default(cuid()) ///@z.string().cuid2()
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  permissions Permission[]
}

model Permission {
  id        String   @id @unique @default(cuid()) ///@z.string().cuid2()
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     Role[]
}

model User {
  id                     String         @id @default(cuid()) ///@z.string().cuid2()
  email                  String         @unique
  password               String ///@z.password()
  username               String         @unique
  name                   String?
  roles                  Role[]
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  RefreshToken           RefreshToken[]
  twoFactorAuthSecret    String? /// Two factor authentication secret
  isTwoFactorAuthEnabled Boolean        @default(false)
}

model Verification {
  id        String   @id @default(cuid()) ///@z.string().cuid2()
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String ///@z.union([z.literal('email'), z.literal('phone')])

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String ///@z.union([z.literal('email'), z.literal('phone')])

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model RefreshToken {
  id     String @id @default(cuid()) ///@z.string().cuid2()
  token  String
  user   User   @relation(fields: [userId], references: [id])
  userId String ///@z.string().cuid2()
}
